{"ast":null,"code":"import _slicedToArray from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/root/Downloads/springboot_react/frontend/my-app/src/component/MainComponent.jsx\";\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { StompSessionProvider, useSubscription } from 'react-stomp-hooks';\n\nvar MainComponent = function MainComponent() {\n  return (\n    /*#__PURE__*/\n    //Initialize Stomp connection, will use SockJS for http(s) and WebSocket for ws(s)\n    //The Connection can be used by all child components via the hooks or hocs.\n    React.createElement(StompSessionProvider, {\n      url: 'https://stream.elite12.de/api/sock' //All options supported by @stomp/stompjs can be used here\n      ,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(SubscribingComponent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }))\n  );\n};\n\nfunction SubscribingComponent() {\n  var _useState = useState('No message received yet'),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastMessage = _useState2[0],\n      setLastMessage = _useState2[1]; //Subscribe to /topic/test, and use handler for all received messages\n  //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n  //If the STOMP connection itself is lost they are however restored on reconnect.\n  //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n\n\n  useSubscription('/topic/test', function (message) {\n    return setLastMessage(message.body);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }, \"Last Message: \", lastMessage);\n}\n\nexport default MainComponent;","map":{"version":3,"sources":["/root/Downloads/springboot_react/frontend/my-app/src/component/MainComponent.jsx"],"names":["React","useState","StompSessionProvider","useSubscription","MainComponent","SubscribingComponent","lastMessage","setLastMessage","message","body"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,oBAAT,EAA+BC,eAA/B,QAAsD,mBAAtD;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B;AAAA;AACE;AACA;AACA,wBAAC,oBAAD;AACE,MAAA,GAAG,EAAE,oCADP,CAEE;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF;AAHF;AAUD,CAXD;;AAaA,SAASC,oBAAT,GAAgC;AAAA,kBACQJ,QAAQ,CAAC,yBAAD,CADhB;AAAA;AAAA,MACvBK,WADuB;AAAA,MACVC,cADU,kBAG9B;AACA;AACA;AACA;;;AACAJ,EAAAA,eAAe,CAAC,aAAD,EAAgB,UAACK,OAAD;AAAA,WAAaD,cAAc,CAACC,OAAO,CAACC,IAAT,CAA3B;AAAA,GAAhB,CAAf;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAoBH,WAApB,CAAP;AACD;;AACD,eAAeF,aAAf","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { StompSessionProvider, useSubscription } from 'react-stomp-hooks';\n\nconst MainComponent = () => {\n  return (\n    //Initialize Stomp connection, will use SockJS for http(s) and WebSocket for ws(s)\n    //The Connection can be used by all child components via the hooks or hocs.\n    <StompSessionProvider\n      url={'https://stream.elite12.de/api/sock'}\n      //All options supported by @stomp/stompjs can be used here\n    >\n      <SubscribingComponent />\n    </StompSessionProvider>\n  );\n};\n\nfunction SubscribingComponent() {\n  const [lastMessage, setLastMessage] = useState('No message received yet');\n\n  //Subscribe to /topic/test, and use handler for all received messages\n  //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n  //If the STOMP connection itself is lost they are however restored on reconnect.\n  //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n  useSubscription('/topic/test', (message) => setLastMessage(message.body));\n\n  return <div>Last Message: {lastMessage}</div>;\n}\nexport default MainComponent;\n"]},"metadata":{},"sourceType":"module"}