{"version":3,"sources":["component/MainComponent.jsx","component/DashboardComponent.jsx","component/TopMenuComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["MainComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getApi","axios","get","then","res","console","log","setState","message","data","catch","state","react_default","a","createElement","Component","DashboardComponent","TopMenuComponent","react_router_dom","Navbar","bg","variant","className","Brand","href","react_router","path","component","App","component_TopMenuComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uTAsCeA,cAlCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAURQ,OAAS,WACPC,IACGC,IAAI,mCACJC,KAAK,SAACC,GACLC,QAAQC,IAAIF,GACZX,EAAKc,SAAS,CACZC,QAASJ,EAAIK,KAAKD,YAGrBE,MAAM,SAACN,GAAD,OAASC,QAAQC,IAAIF,MAlB9BX,EAAKkB,MAAQ,CACXH,QAAS,IAHMf,mFAQjBG,KAAKI,0CAgBL,OACEY,EAAAC,EAAAC,cAAA,qCAEEF,EAAAC,EAAAC,cAAA,WACClB,KAAKe,MAAMH,gBA7BQO,aCUbC,mLARP,OACIJ,EAAAC,EAAAC,cAAA,kDAHqBC,aC8BlBE,mLAxBP,OACIL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACIC,GAAG,OACHC,QAAQ,OACRC,UAAU,QACVV,EAAAC,EAAAC,cAACK,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,QAGAZ,EAAAC,EAAAC,cAACK,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,QAGAZ,EAAAC,EAAAC,cAACK,EAAA,EAAOI,MAAR,CAAcC,KAAK,cAAnB,cAKJZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWpC,IAC/BqB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,aAAaC,UAAWX,YApBrBD,aCUhBa,MAXf,WACE,OACIhB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACXV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAD,SCEMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.fb9260c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass MainComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n    };\n  }\n\n  componentDidMount() {\n    this.getApi();\n  }\n\n  getApi = () => {\n    axios\n      .get('http://localhost:8080/api/hello')\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          message: res.data.message,\n        });\n      })\n      .catch((res) => console.log(res));\n  };\n\n  render() {\n    return (\n      <div>\n        Main 페이지\n        <br />\n        {this.state.message}\n      </div>\n    );\n  }\n}\n\nexport default MainComponent;\n","import React, {Component} from \"react\";\n\n\nclass DashboardComponent extends Component {\n    render() {\n        return(\n            <div>\n                Dashboard 페이지\n            </div>\n        )\n    }\n}\n\nexport default DashboardComponent","import React, {Component} from \"react\";\nimport {Navbar} from \"react-bootstrap\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\nimport MainComponent from './MainComponent'\nimport DashboardComponent from './DashboardComponent'\n\nclass TopMenuComponent extends Component {\n    render() {\n        return (\n            <Router>\n                <Navbar\n                    bg=\"dark\"\n                    variant=\"dark\"\n                    className=\"mb-4\" >\n                    <Navbar.Brand href=\"/\">\n                        Home\n                    </Navbar.Brand>\n                    <Navbar.Brand href=\"/main\">\n                        Main\n                    </Navbar.Brand>\n                    <Navbar.Brand href=\"/dashboard\">\n                        Dashboard\n                    </Navbar.Brand>\n                </Navbar>\n\n                <Route path=\"/main\" component={MainComponent} />\n                <Route path=\"/dashboard\" component={DashboardComponent} />\n            </Router>\n        )\n    }\n}\n\nexport default TopMenuComponent;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nimport TopMenuComponent from \"./component/TopMenuComponent\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          <div>\n              <TopMenuComponent>\n              </TopMenuComponent>\n          </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}