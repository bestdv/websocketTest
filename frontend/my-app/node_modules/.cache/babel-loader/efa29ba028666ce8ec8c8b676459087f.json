{"ast":null,"code":"import _classCallCheck from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/root/Downloads/springboot_react/frontend/my-app/src/component/MainComponent.jsx\";\n\nimport React, { useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { StompSessionProvider, useStompClient, useSubscription, withStompClient, withSubscription } from 'react-stomp-hooks';\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Card, CardContent, Container, Grid, TextField, Typography } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nvar MainComponent = function MainComponent() {\n  return (\n    /*#__PURE__*/\n    //Initialize Stomp connection, will use sockjs, as the protocol specified is https\n    //The Connection can be used by all child components via the hooks or hocs.\n    React.createElement(StompSessionProvider, {\n      url: 'https://stream.elite12.de/api/sock' //All options supported by @stomp/stompjs can be used here\n      ,\n      debug: function debug(str) {\n        console.log(str);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: {\n        margin: '3em'\n      },\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, \"You can see the STOMP Messages send and received in the browser console\"), /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, \"Note that, because the components are unmounted when the accordion is unexpanded, all subscriptions are removed when you close the accordion.\"))), /*#__PURE__*/React.createElement(Showcase, {\n      title: 'Subscribing',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Subscribing, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Showcase, {\n      title: 'Sending Messages',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SendingMessages, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Showcase, {\n      title: 'Higher Order Components',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HigherOrderComponents, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }))))\n  );\n};\n\nfunction Subscribing() {\n  var _useState = useState('No message received yet'),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastMessage = _useState2[0],\n      setLastMessage = _useState2[1]; //Subscribe to /topic/test, and use handler for all received messages\n  //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n  //If the STOMP connection itself is lost they are however restored on reconnect.\n  //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n\n\n  useSubscription('/topic/test', function (message) {\n    return setLastMessage(message.body);\n  });\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }, \"Last Message: \", lastMessage);\n}\n\nfunction SendingMessages() {\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      input = _useState4[0],\n      setInput = _useState4[1];\n\n  var _useState5 = useState('No message received yet'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lastMessage = _useState6[0],\n      setLastMessage = _useState6[1]; //Get Instance of StompClient\n  //This is the StompCLient from @stomp/stompjs\n\n\n  var stompClient = useStompClient();\n  useSubscription('/user/queue/echoreply', function (message) {\n    return setLastMessage(message.body);\n  });\n\n  var sendMessage = function sendMessage() {\n    //Send Message\n    stompClient.publish({\n      destination: '/app/echo',\n      body: 'Echo ' + input\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: 'contained',\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Send Message\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"standard\",\n    value: input,\n    onChange: function onChange(event) {\n      return setInput(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: 'body1',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Last Message received: \", lastMessage)));\n}\n\nvar HigherOrderComponents = withStompClient(withSubscription( /*#__PURE__*/function (_React$Component) {\n  _inherits(HOCDemo, _React$Component);\n\n  function HOCDemo(props) {\n    var _this2;\n\n    _classCallCheck(this, HOCDemo);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(HOCDemo).call(this, props)); //stompCLient property is injected in the withStompClient HOC\n\n    _this2.stompClient = props.stompClient;\n    _this2.state = {\n      input: '',\n      lastMessage: 'No message received yet'\n    };\n    _this2.handleChange = _this2.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.sendMessage = _this2.sendMessage.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.onMessage = _this2.onMessage.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    return _this2;\n  } //You have to specify an onMessage method for the withSubscription HOC.\n\n\n  _createClass(HOCDemo, [{\n    key: \"onMessage\",\n    value: function onMessage(message) {\n      this.setState({\n        lastMessage: message.body\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage() {\n      this.stompClient.publish({\n        destination: '/app/echo',\n        body: 'Echo ' + this.state.input\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        input: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: 'contained',\n        onClick: this.sendMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }, \"Send Message\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        variant: \"standard\",\n        value: this.state.input,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: 'body1',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }\n      }, \"Last Message received: \", this.state.lastMessage)));\n    }\n  }]);\n\n  return HOCDemo;\n}(React.Component), '/user/queue/echoreply'));\n\nfunction Showcase(props) {\n  return /*#__PURE__*/React.createElement(Accordion, {\n    style: {\n      margin: '3em'\n    },\n    TransitionProps: {\n      unmountOnExit: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AccordionSummary, {\n    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    }),\n    \"aria-controls\": \"panel1a-content\",\n    id: \"panel1a-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, props.title)), /*#__PURE__*/React.createElement(AccordionDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, props.children));\n}\n\nexport default MainComponent;","map":{"version":3,"sources":["/root/Downloads/springboot_react/frontend/my-app/src/component/MainComponent.jsx"],"names":["React","useState","CssBaseline","StompSessionProvider","useStompClient","useSubscription","withStompClient","withSubscription","Accordion","AccordionDetails","AccordionSummary","Box","Button","Card","CardContent","Container","Grid","TextField","Typography","ExpandMoreIcon","MainComponent","str","console","log","margin","Subscribing","lastMessage","setLastMessage","message","body","SendingMessages","input","setInput","stompClient","sendMessage","publish","destination","event","target","value","HigherOrderComponents","props","state","handleChange","bind","onMessage","setState","Component","Showcase","unmountOnExit","title","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport {\n  StompSessionProvider,\n  useStompClient,\n  useSubscription,\n  withStompClient,\n  withSubscription,\n} from 'react-stomp-hooks';\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst MainComponent = () => {\n  return (\n    //Initialize Stomp connection, will use sockjs, as the protocol specified is https\n    //The Connection can be used by all child components via the hooks or hocs.\n    <StompSessionProvider\n      url={'https://stream.elite12.de/api/sock'}\n      //All options supported by @stomp/stompjs can be used here\n      debug={(str) => {\n        console.log(str);\n      }}\n    >\n      <CssBaseline />\n      <Container>\n        <Card style={{ margin: '3em' }} variant=\"outlined\">\n          <CardContent>\n            <Typography>\n              You can see the STOMP Messages send and received in the browser\n              console\n            </Typography>\n            <Typography>\n              Note that, because the components are unmounted when the accordion\n              is unexpanded, all subscriptions are removed when you close the\n              accordion.\n            </Typography>\n          </CardContent>\n        </Card>\n        <Showcase title={'Subscribing'}>\n          <Subscribing />\n        </Showcase>\n        <Showcase title={'Sending Messages'}>\n          <SendingMessages />\n        </Showcase>\n        <Showcase title={'Higher Order Components'}>\n          <HigherOrderComponents />\n        </Showcase>\n      </Container>\n    </StompSessionProvider>\n  );\n};\n\nfunction Subscribing() {\n  const [lastMessage, setLastMessage] = useState('No message received yet');\n\n  //Subscribe to /topic/test, and use handler for all received messages\n  //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n  //If the STOMP connection itself is lost they are however restored on reconnect.\n  //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n  useSubscription('/topic/test', (message) => setLastMessage(message.body));\n\n  return <Box>Last Message: {lastMessage}</Box>;\n}\n\nfunction SendingMessages() {\n  const [input, setInput] = useState('');\n  const [lastMessage, setLastMessage] = useState('No message received yet');\n\n  //Get Instance of StompClient\n  //This is the StompCLient from @stomp/stompjs\n  const stompClient = useStompClient();\n  useSubscription('/user/queue/echoreply', (message) =>\n    setLastMessage(message.body)\n  );\n\n  const sendMessage = () => {\n    //Send Message\n    stompClient.publish({\n      destination: '/app/echo',\n      body: 'Echo ' + input,\n    });\n  };\n\n  return (\n    <Grid container direction=\"row\" spacing={3}>\n      <Grid item>\n        <Button variant={'contained'} onClick={sendMessage}>\n          Send Message\n        </Button>\n      </Grid>\n      <Grid item>\n        <TextField\n          variant=\"standard\"\n          value={input}\n          onChange={(event) => setInput(event.target.value)}\n        />\n      </Grid>\n      <Grid item>\n        <Typography variant={'body1'}>\n          Last Message received: {lastMessage}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst HigherOrderComponents = withStompClient(\n  withSubscription(\n    class HOCDemo extends React.Component {\n      constructor(props) {\n        super(props);\n\n        //stompCLient property is injected in the withStompClient HOC\n        this.stompClient = props.stompClient;\n        this.state = {\n          input: '',\n          lastMessage: 'No message received yet',\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.onMessage = this.onMessage.bind(this);\n      }\n\n      //You have to specify an onMessage method for the withSubscription HOC.\n      onMessage(message) {\n        this.setState({\n          lastMessage: message.body,\n        });\n      }\n\n      sendMessage() {\n        this.stompClient.publish({\n          destination: '/app/echo',\n          body: 'Echo ' + this.state.input,\n        });\n      }\n\n      handleChange(event) {\n        this.setState({\n          input: event.target.value,\n        });\n      }\n\n      render() {\n        return (\n          <Grid container direction=\"row\" spacing={3}>\n            <Grid item>\n              <Button variant={'contained'} onClick={this.sendMessage}>\n                Send Message\n              </Button>\n            </Grid>\n            <Grid item>\n              <TextField\n                variant=\"standard\"\n                value={this.state.input}\n                onChange={this.handleChange}\n              />\n            </Grid>\n            <Grid item>\n              <Typography variant={'body1'}>\n                Last Message received: {this.state.lastMessage}\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n      }\n    },\n    '/user/queue/echoreply'\n  )\n);\n\nfunction Showcase(props) {\n  return (\n    <Accordion\n      style={{ margin: '3em' }}\n      TransitionProps={{ unmountOnExit: true }}\n    >\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography>{props.title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>{props.children}</AccordionDetails>\n    </Accordion>\n  );\n}\n\nexport default MainComponent;\n"]},"metadata":{},"sourceType":"module"}