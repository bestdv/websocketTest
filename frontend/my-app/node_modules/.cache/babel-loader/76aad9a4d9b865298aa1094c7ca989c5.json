{"ast":null,"code":"import _slicedToArray from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/root/Downloads/springboot_react/frontend/my-app/src/App.js\";\nimport React from 'react';\nimport { useState } from 'react'; // import CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { StompSessionProvider, useStompClient, useSubscription, withStompClient, withSubscription } from 'react-stomp-hooks';\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Card, CardContent, Container, Grid, TextField, Typography } from '@material-ui/core';\n\nfunction App() {\n  function SubscribingComponent() {\n    var _useState = useState('No message received yet'),\n        _useState2 = _slicedToArray(_useState, 2),\n        lastMessage = _useState2[0],\n        setLastMessage = _useState2[1]; //Subscribe to /topic/test, and use handler for all received messages\n    //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n    //If the STOMP connection itself is lost they are however restored on reconnect.\n    //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n\n\n    useSubscription('/topic/test', function (message) {\n      return setLastMessage(message.body);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, \"Last Message: \", lastMessage);\n  }\n\n  function SendingMessages() {\n    var _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        input = _useState4[0],\n        setInput = _useState4[1];\n\n    var _useState5 = useState('No message received yet'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        lastMessage = _useState6[0],\n        setLastMessage = _useState6[1]; //Get Instance of StompClient\n    //This is the StompCLient from @stomp/stompjs\n\n\n    var stompClient = useStompClient();\n    useSubscription('/user/queue/echoreply', function (message) {\n      return setLastMessage(message.body);\n    });\n\n    var sendMessage = function sendMessage() {\n      //Send Message\n      stompClient.publish({\n        destination: '/app/echo',\n        body: 'Echo ' + input\n      });\n    };\n\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: 'contained',\n      onClick: sendMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, \"Send Message\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"standard\",\n      value: input,\n      onChange: function onChange(event) {\n        return setInput(event.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: 'body1',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, \"Last Message received: \", lastMessage)));\n  }\n\n  return (\n    /*#__PURE__*/\n    //Initialize Stomp connection, will use SockJS for http(s) and WebSocket for ws(s)\n    //The Connection can be used by all child components via the hooks or hocs.\n    React.createElement(StompSessionProvider, {\n      url: 'https://192.168.120.6:8080/app/monitoring/graph' //All options supported by @stomp/stompjs can be used here\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(SubscribingComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(SendingMessages, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["/root/Downloads/springboot_react/frontend/my-app/src/App.js"],"names":["React","useState","StompSessionProvider","useStompClient","useSubscription","withStompClient","withSubscription","Accordion","AccordionDetails","AccordionSummary","Box","Button","Card","CardContent","Container","Grid","TextField","Typography","App","SubscribingComponent","lastMessage","setLastMessage","message","body","SendingMessages","input","setInput","stompClient","sendMessage","publish","destination","event","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\n// import CssBaseline from '@material-ui/core/CssBaseline';\n\nimport {\n  StompSessionProvider,\n  useStompClient,\n  useSubscription,\n  withStompClient,\n  withSubscription,\n} from 'react-stomp-hooks';\n\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n\nfunction App() {\n  function SubscribingComponent() {\n    const [lastMessage, setLastMessage] = useState('No message received yet');\n\n    //Subscribe to /topic/test, and use handler for all received messages\n    //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n    //If the STOMP connection itself is lost they are however restored on reconnect.\n    //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n    useSubscription('/topic/test', (message) => setLastMessage(message.body));\n\n    return <div>Last Message: {lastMessage}</div>;\n  }\n\n  function SendingMessages() {\n    const [input, setInput] = useState('');\n    const [lastMessage, setLastMessage] = useState('No message received yet');\n\n    //Get Instance of StompClient\n    //This is the StompCLient from @stomp/stompjs\n    const stompClient = useStompClient();\n    useSubscription('/user/queue/echoreply', (message) =>\n      setLastMessage(message.body)\n    );\n\n    const sendMessage = () => {\n      //Send Message\n      stompClient.publish({\n        destination: '/app/echo',\n        body: 'Echo ' + input,\n      });\n    };\n\n    return (\n      <Grid container direction=\"row\" spacing={3}>\n        <Grid item>\n          <Button variant={'contained'} onClick={sendMessage}>\n            Send Message\n          </Button>\n        </Grid>\n        <Grid item>\n          <TextField\n            variant=\"standard\"\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n        </Grid>\n        <Grid item>\n          <Typography variant={'body1'}>\n            Last Message received: {lastMessage}\n          </Typography>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  return (\n    //Initialize Stomp connection, will use SockJS for http(s) and WebSocket for ws(s)\n    //The Connection can be used by all child components via the hooks or hocs.\n    <StompSessionProvider\n      url={'https://192.168.120.6:8080/app/monitoring/graph'}\n      //All options supported by @stomp/stompjs can be used here\n    >\n      <SubscribingComponent />\n      {/* <Showcase title={'Sending Messages'}> */}\n      <SendingMessages />\n      {/* </Showcase> */}\n    </StompSessionProvider>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}