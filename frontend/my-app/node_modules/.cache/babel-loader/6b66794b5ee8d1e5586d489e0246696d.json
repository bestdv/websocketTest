{"ast":null,"code":"import _slicedToArray from \"/root/Downloads/springboot_react/frontend/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/root/Downloads/springboot_react/frontend/my-app/src/App.js\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { StompSessionProvider, useSubscription } from 'react-stomp-hooks';\n\nfunction App() {\n  function SubscribingComponent() {\n    var _useState = useState('No message received yet'),\n        _useState2 = _slicedToArray(_useState, 2),\n        lastMessage = _useState2[0],\n        setLastMessage = _useState2[1]; //Subscribe to /topic/test, and use handler for all received messages\n    //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n    //If the STOMP connection itself is lost they are however restored on reconnect.\n    //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n\n\n    useSubscription('/topic/test', function (message) {\n      return setLastMessage(message.body);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 12\n      }\n    }, \"Last Message: \", lastMessage);\n  }\n\n  function SendingMessages() {\n    var _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        input = _useState4[0],\n        setInput = _useState4[1];\n\n    var _useState5 = useState('No message received yet'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        lastMessage = _useState6[0],\n        setLastMessage = _useState6[1]; //Get Instance of StompClient\n    //This is the StompCLient from @stomp/stompjs\n\n\n    var stompClient = useStompClient();\n    useSubscription('/user/queue/echoreply', function (message) {\n      return setLastMessage(message.body);\n    });\n\n    var sendMessage = function sendMessage() {\n      //Send Message\n      stompClient.publish({\n        destination: '/app/echo',\n        body: 'Echo ' + input\n      });\n    };\n\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: 'contained',\n      onClick: sendMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, \"Send Message\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"standard\",\n      value: input,\n      onChange: function onChange(event) {\n        return setInput(event.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: 'body1',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, \"Last Message received: \", lastMessage)));\n  }\n\n  return (\n    /*#__PURE__*/\n    //Initialize Stomp connection, will use SockJS for http(s) and WebSocket for ws(s)\n    //The Connection can be used by all child components via the hooks or hocs.\n    React.createElement(StompSessionProvider, {\n      url: 'https://stream.elite12.de/api/sock' //All options supported by @stomp/stompjs can be used here\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(SubscribingComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["/root/Downloads/springboot_react/frontend/my-app/src/App.js"],"names":["React","useState","StompSessionProvider","useSubscription","App","SubscribingComponent","lastMessage","setLastMessage","message","body","SendingMessages","input","setInput","stompClient","useStompClient","sendMessage","publish","destination","event","target","value"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,oBAAT,EAA+BC,eAA/B,QAAsD,mBAAtD;;AAEA,SAASC,GAAT,GAAe;AACb,WAASC,oBAAT,GAAgC;AAAA,oBACQJ,QAAQ,CAAC,yBAAD,CADhB;AAAA;AAAA,QACvBK,WADuB;AAAA,QACVC,cADU,kBAG9B;AACA;AACA;AACA;;;AACAJ,IAAAA,eAAe,CAAC,aAAD,EAAgB,UAACK,OAAD;AAAA,aAAaD,cAAc,CAACC,OAAO,CAACC,IAAT,CAA3B;AAAA,KAAhB,CAAf;AAEA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoBH,WAApB,CAAP;AACD;;AAED,WAASI,eAAT,GAA2B;AAAA,qBACCT,QAAQ,CAAC,EAAD,CADT;AAAA;AAAA,QAClBU,KADkB;AAAA,QACXC,QADW;;AAAA,qBAEaX,QAAQ,CAAC,yBAAD,CAFrB;AAAA;AAAA,QAElBK,WAFkB;AAAA,QAELC,cAFK,kBAIzB;AACA;;;AACA,QAAMM,WAAW,GAAGC,cAAc,EAAlC;AACAX,IAAAA,eAAe,CAAC,uBAAD,EAA0B,UAACK,OAAD;AAAA,aACvCD,cAAc,CAACC,OAAO,CAACC,IAAT,CADyB;AAAA,KAA1B,CAAf;;AAIA,QAAMM,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB;AACAF,MAAAA,WAAW,CAACG,OAAZ,CAAoB;AAClBC,QAAAA,WAAW,EAAE,WADK;AAElBR,QAAAA,IAAI,EAAE,UAAUE;AAFE,OAApB;AAID,KAND;;AAQA,wBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,KAA1B;AAAgC,MAAA,OAAO,EAAE,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,WAAjB;AAA8B,MAAA,OAAO,EAAEI,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,eAME,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,OAAO,EAAC,UADV;AAEE,MAAA,KAAK,EAAEJ,KAFT;AAGE,MAAA,QAAQ,EAAE,kBAACO,KAAD;AAAA,eAAWN,QAAQ,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnB;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CANF,eAaE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAC0Bd,WAD1B,CADF,CAbF,CADF;AAqBD;;AAED;AAAA;AACE;AACA;AACA,wBAAC,oBAAD;AACE,MAAA,GAAG,EAAE,oCADP,CAEE;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF;AAHF;AAUD;;AACD,eAAeF,GAAf","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { StompSessionProvider, useSubscription } from 'react-stomp-hooks';\n\nfunction App() {\n  function SubscribingComponent() {\n    const [lastMessage, setLastMessage] = useState('No message received yet');\n\n    //Subscribe to /topic/test, and use handler for all received messages\n    //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n    //If the STOMP connection itself is lost they are however restored on reconnect.\n    //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n    useSubscription('/topic/test', (message) => setLastMessage(message.body));\n\n    return <div>Last Message: {lastMessage}</div>;\n  }\n\n  function SendingMessages() {\n    const [input, setInput] = useState('');\n    const [lastMessage, setLastMessage] = useState('No message received yet');\n\n    //Get Instance of StompClient\n    //This is the StompCLient from @stomp/stompjs\n    const stompClient = useStompClient();\n    useSubscription('/user/queue/echoreply', (message) =>\n      setLastMessage(message.body)\n    );\n\n    const sendMessage = () => {\n      //Send Message\n      stompClient.publish({\n        destination: '/app/echo',\n        body: 'Echo ' + input,\n      });\n    };\n\n    return (\n      <Grid container direction=\"row\" spacing={3}>\n        <Grid item>\n          <Button variant={'contained'} onClick={sendMessage}>\n            Send Message\n          </Button>\n        </Grid>\n        <Grid item>\n          <TextField\n            variant=\"standard\"\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n        </Grid>\n        <Grid item>\n          <Typography variant={'body1'}>\n            Last Message received: {lastMessage}\n          </Typography>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  return (\n    //Initialize Stomp connection, will use SockJS for http(s) and WebSocket for ws(s)\n    //The Connection can be used by all child components via the hooks or hocs.\n    <StompSessionProvider\n      url={'https://stream.elite12.de/api/sock'}\n      //All options supported by @stomp/stompjs can be used here\n    >\n      <SubscribingComponent />\n    </StompSessionProvider>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}