{"ast":null,"code":"var _jsxFileName = \"/root/Downloads/springboot_react/frontend/my-app/src/component/MainComponent.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react'; // import CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { StompSessionProvider, useStompClient, useSubscription, withStompClient, withSubscription } from 'react-stomp-hooks';\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Card, CardContent, Container, Grid, TextField, Typography } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst MainComponent = () => {\n  return (\n    /*#__PURE__*/\n    //Initialize Stomp connection, will use sockjs, as the protocol specified is https\n    //The Connection can be used by all child components via the hooks or hocs.\n    React.createElement(StompSessionProvider, {\n      url: 'https://stream.elite12.de/api/sock' //All options supported by @stomp/stompjs can be used here\n      ,\n      debug: str => {\n        console.log(str);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: {\n        margin: '3em'\n      },\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, \"You can see the STOMP Messages send and received in the browser console\"), /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, \"Note that, because the components are unmounted when the accordion is unexpanded, all subscriptions are removed when you close the accordion.\"))), /*#__PURE__*/React.createElement(Showcase, {\n      title: 'Subscribing',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Subscribing, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Showcase, {\n      title: 'Sending Messages',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SendingMessages, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Showcase, {\n      title: 'Higher Order Components',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HigherOrderComponents, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }))))\n  );\n};\n\n_c = MainComponent;\n\nfunction Subscribing() {\n  _s();\n\n  const [lastMessage, setLastMessage] = useState('No message received yet'); //Subscribe to /topic/test, and use handler for all received messages\n  //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n  //If the STOMP connection itself is lost they are however restored on reconnect.\n  //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n\n  useSubscription('/topic/test', message => setLastMessage(message.body));\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }, \"Last Message: \", lastMessage);\n}\n\n_s(Subscribing, \"Qfhu+x0Ii+qlmQmaovSEGppv5Z8=\", false, function () {\n  return [useSubscription];\n});\n\n_c2 = Subscribing;\n\nfunction SendingMessages() {\n  _s2();\n\n  const [input, setInput] = useState('');\n  const [lastMessage, setLastMessage] = useState('No message received yet'); //Get Instance of StompClient\n  //This is the StompCLient from @stomp/stompjs\n\n  const stompClient = useStompClient();\n  useSubscription('/user/queue/echoreply', message => setLastMessage(message.body));\n\n  const sendMessage = () => {\n    //Send Message\n    stompClient.publish({\n      destination: '/app/echo',\n      body: 'Echo ' + input\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: 'contained',\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Send Message\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"standard\",\n    value: input,\n    onChange: event => setInput(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: 'body1',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Last Message received: \", lastMessage)));\n}\n\n_s2(SendingMessages, \"e2JXaq42lA7nlq1qbLyKF6Qayjo=\", false, function () {\n  return [useStompClient, useSubscription];\n});\n\n_c3 = SendingMessages;\nconst HigherOrderComponents = withStompClient(withSubscription(class HOCDemo extends React.Component {\n  constructor(props) {\n    super(props); //stompCLient property is injected in the withStompClient HOC\n\n    this.stompClient = props.stompClient;\n    this.state = {\n      input: '',\n      lastMessage: 'No message received yet'\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.onMessage = this.onMessage.bind(this);\n  } //You have to specify an onMessage method for the withSubscription HOC.\n\n\n  onMessage(message) {\n    this.setState({\n      lastMessage: message.body\n    });\n  }\n\n  sendMessage() {\n    this.stompClient.publish({\n      destination: '/app/echo',\n      body: 'Echo ' + this.state.input\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: 'contained',\n      onClick: this.sendMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, \"Send Message\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"standard\",\n      value: this.state.input,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: 'body1',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }, \"Last Message received: \", this.state.lastMessage)));\n  }\n\n}, '/user/queue/echoreply'));\n_c4 = HigherOrderComponents;\n\nfunction Showcase(props) {\n  return /*#__PURE__*/React.createElement(Accordion, {\n    style: {\n      margin: '3em'\n    },\n    TransitionProps: {\n      unmountOnExit: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AccordionSummary, {\n    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    }),\n    \"aria-controls\": \"panel1a-content\",\n    id: \"panel1a-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, props.title)), /*#__PURE__*/React.createElement(AccordionDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, props.children));\n}\n\n_c5 = Showcase;\nexport default MainComponent;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MainComponent\");\n$RefreshReg$(_c2, \"Subscribing\");\n$RefreshReg$(_c3, \"SendingMessages\");\n$RefreshReg$(_c4, \"HigherOrderComponents\");\n$RefreshReg$(_c5, \"Showcase\");","map":{"version":3,"sources":["/root/Downloads/springboot_react/frontend/my-app/src/component/MainComponent.jsx"],"names":["React","useState","StompSessionProvider","useStompClient","useSubscription","withStompClient","withSubscription","Accordion","AccordionDetails","AccordionSummary","Box","Button","Card","CardContent","Container","Grid","TextField","Typography","ExpandMoreIcon","MainComponent","str","console","log","margin","Subscribing","lastMessage","setLastMessage","message","body","SendingMessages","input","setInput","stompClient","sendMessage","publish","destination","event","target","value","HigherOrderComponents","HOCDemo","Component","constructor","props","state","handleChange","bind","onMessage","setState","render","Showcase","unmountOnExit","title","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\n// import CssBaseline from '@material-ui/core/CssBaseline';\n\nimport {\n  StompSessionProvider,\n  useStompClient,\n  useSubscription,\n  withStompClient,\n  withSubscription,\n} from 'react-stomp-hooks';\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst MainComponent = () => {\n  return (\n    //Initialize Stomp connection, will use sockjs, as the protocol specified is https\n    //The Connection can be used by all child components via the hooks or hocs.\n    <StompSessionProvider\n      url={'https://stream.elite12.de/api/sock'}\n      //All options supported by @stomp/stompjs can be used here\n      debug={(str) => {\n        console.log(str);\n      }}\n    >\n      {/* <CssBaseline /> */}\n      <Container>\n        <Card style={{ margin: '3em' }} variant=\"outlined\">\n          <CardContent>\n            <Typography>\n              You can see the STOMP Messages send and received in the browser\n              console\n            </Typography>\n            <Typography>\n              Note that, because the components are unmounted when the accordion\n              is unexpanded, all subscriptions are removed when you close the\n              accordion.\n            </Typography>\n          </CardContent>\n        </Card>\n        <Showcase title={'Subscribing'}>\n          <Subscribing />\n        </Showcase>\n        <Showcase title={'Sending Messages'}>\n          <SendingMessages />\n        </Showcase>\n        <Showcase title={'Higher Order Components'}>\n          <HigherOrderComponents />\n        </Showcase>\n      </Container>\n    </StompSessionProvider>\n  );\n};\n\nfunction Subscribing() {\n  const [lastMessage, setLastMessage] = useState('No message received yet');\n\n  //Subscribe to /topic/test, and use handler for all received messages\n  //Note that all subscriptions made through the library are automatically removed when their owning component gets unmounted.\n  //If the STOMP connection itself is lost they are however restored on reconnect.\n  //You can also supply an array as the first parameter, which will subscribe to all destinations in the array\n  useSubscription('/topic/test', (message) => setLastMessage(message.body));\n\n  return <Box>Last Message: {lastMessage}</Box>;\n}\n\nfunction SendingMessages() {\n  const [input, setInput] = useState('');\n  const [lastMessage, setLastMessage] = useState('No message received yet');\n\n  //Get Instance of StompClient\n  //This is the StompCLient from @stomp/stompjs\n  const stompClient = useStompClient();\n  useSubscription('/user/queue/echoreply', (message) =>\n    setLastMessage(message.body)\n  );\n\n  const sendMessage = () => {\n    //Send Message\n    stompClient.publish({\n      destination: '/app/echo',\n      body: 'Echo ' + input,\n    });\n  };\n\n  return (\n    <Grid container direction=\"row\" spacing={3}>\n      <Grid item>\n        <Button variant={'contained'} onClick={sendMessage}>\n          Send Message\n        </Button>\n      </Grid>\n      <Grid item>\n        <TextField\n          variant=\"standard\"\n          value={input}\n          onChange={(event) => setInput(event.target.value)}\n        />\n      </Grid>\n      <Grid item>\n        <Typography variant={'body1'}>\n          Last Message received: {lastMessage}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst HigherOrderComponents = withStompClient(\n  withSubscription(\n    class HOCDemo extends React.Component {\n      constructor(props) {\n        super(props);\n\n        //stompCLient property is injected in the withStompClient HOC\n        this.stompClient = props.stompClient;\n        this.state = {\n          input: '',\n          lastMessage: 'No message received yet',\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.onMessage = this.onMessage.bind(this);\n      }\n\n      //You have to specify an onMessage method for the withSubscription HOC.\n      onMessage(message) {\n        this.setState({\n          lastMessage: message.body,\n        });\n      }\n\n      sendMessage() {\n        this.stompClient.publish({\n          destination: '/app/echo',\n          body: 'Echo ' + this.state.input,\n        });\n      }\n\n      handleChange(event) {\n        this.setState({\n          input: event.target.value,\n        });\n      }\n\n      render() {\n        return (\n          <Grid container direction=\"row\" spacing={3}>\n            <Grid item>\n              <Button variant={'contained'} onClick={this.sendMessage}>\n                Send Message\n              </Button>\n            </Grid>\n            <Grid item>\n              <TextField\n                variant=\"standard\"\n                value={this.state.input}\n                onChange={this.handleChange}\n              />\n            </Grid>\n            <Grid item>\n              <Typography variant={'body1'}>\n                Last Message received: {this.state.lastMessage}\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n      }\n    },\n    '/user/queue/echoreply'\n  )\n);\n\nfunction Showcase(props) {\n  return (\n    <Accordion\n      style={{ margin: '3em' }}\n      TransitionProps={{ unmountOnExit: true }}\n    >\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography>{props.title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>{props.children}</AccordionDetails>\n    </Accordion>\n  );\n}\n\nexport default MainComponent;\n"]},"metadata":{},"sourceType":"module"}